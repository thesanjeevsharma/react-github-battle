{"version":3,"sources":["components/UserInput.js","components/Result.js","components/Home.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["UserInput","props","state","player1","player2","error","err_message","fight","bind","this","setState","fighting","onFight","className","hidden","type","placeholder","value","onChange","e","target","onClick","disabled","Component","Result","score","toFixed","src","winner","avatar_url","alt","id","login","location","Home","fetchData","fetch","json","player1data","player2data","player1score","followers","following","public_repos","Date","getFullYear","parseInt","created_at","split","player2score","isNaN","Error","message","console","log","Fragment","Header","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0YAIqBA,G,kBACjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,QAAU,GACVC,QAAU,GACVC,OAAQ,EACRC,YAAc,IAElB,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBARC,E,qEAYXC,KAAKP,MAAMC,SAAWM,KAAKP,MAAME,SAChCK,KAAKC,SAAS,CAAEC,UAAW,EAAMN,OAAQ,IACzCI,KAAKR,MAAMW,QAAQH,KAAKP,MAAMC,QAASM,KAAKP,MAAME,UAElDK,KAAKC,SAAS,CAAEL,OAAQ,EAAMM,UAAW,EAAOL,YAAc,sB,+BAI5D,IAAD,OACL,OACI,yBAAKO,UAAU,iBACX,yBAAKA,UAAU,QAAQC,QAAUL,KAAKP,MAAMG,OACxC,2BAAKI,KAAKP,MAAMI,cAEpB,yBAAKO,UAAU,QACX,+CACA,2BAAOE,KAAK,OAAOC,YAAY,iBAAiBC,MAAQR,KAAKP,MAAMC,QAAUe,SAAW,SAACC,GAAQ,EAAKT,SAAS,CAAEP,QAAUgB,EAAEC,OAAOH,YAExI,yBAAKJ,UAAU,QACX,+CACA,2BAAOE,KAAK,OAAOC,YAAY,iBAAiBC,MAAQR,KAAKP,MAAME,QAAUc,SAAW,SAACC,GAAQ,EAAKT,SAAS,CAAEN,QAAUe,EAAEC,OAAOH,YAExI,4BAAQI,QAAUZ,KAAKF,MAAQe,SAAWb,KAAKR,MAAMU,UAC/CF,KAAKR,MAAMU,SAAW,cAAgB,c,GApCrBY,cCAlBC,G,uLAEb,OACI,yBAAKX,UAAU,SAASC,QAAUL,KAAKR,MAAMwB,OACzC,sCACA,sCAAahB,KAAKR,MAAMwB,MAAMC,QAAQ,IACtC,yBAAKC,IAAMlB,KAAKR,MAAM2B,OAAOC,WAAaC,IAAI,oBAC9C,uBAAGC,GAAG,YAAN,IAAoBtB,KAAKR,MAAM2B,OAAOI,OACtC,uBAAGD,GAAG,YAAatB,KAAKR,MAAM2B,OAAOK,e,GARjBV,cCGfW,G,kBACjB,WAAYjC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT0B,OAAS,GACTH,MAAQ,EACRpB,OAAQ,EACRC,YAAc,QACdK,UAAW,GAEf,EAAKwB,UAAY,EAAKA,UAAU3B,KAAf,gBATF,E,gHAYHL,EAASC,G,6FAEjBK,KAAKC,SAAS,CAAEC,UAAW,I,SACKyB,MAAM,gCAAkCjC,G,8BAAUkC,O,cAA9EC,E,gBAC4BF,MAAM,gCAAkChC,G,+BAAUiC,O,WAA9EE,E,OACAC,EAAgBF,EAAYG,UAAYH,EAAYI,UAAcJ,EAAYK,eAAiB,IAAIC,MAAQC,cAAgBC,SAASR,EAAYS,WAAWC,MAAM,KAAK,KACtKC,EAAgBV,EAAYE,UAAYF,EAAYG,UAAcH,EAAYI,eAAiB,IAAIC,MAAQC,cAAgBC,SAASP,EAAYQ,WAAWC,MAAM,KAAK,MACtKE,MAAMD,KAAiBC,MAAMV,G,uBAAqB,IAAIW,MAAM,gC,QAChE1C,KAAKC,SAAS,CAAEkB,OAASY,EAAeS,EAAeX,EAAcC,EAAad,MAAQe,EAAeS,EAAeT,EAAeS,EAAc5C,OAAQ,EAAOM,UAAW,I,kDAE/KF,KAAKC,SAAS,CAAEL,OAAQ,EAAMC,YAAc,KAAI8C,QAAU,KAAIA,QAAU,yCAA0CzC,UAAW,IAC7H0C,QAAQC,IAAR,M,kJAKJ,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAK1C,UAAU,aAAaC,QAAUL,KAAKP,MAAMG,OAC7C,2BAAKI,KAAKP,MAAMI,cAEpB,yBAAKO,UAAU,aACX,yBAAKA,UAAU,eACX,kBAAC,EAAD,CAAWD,QAAUH,KAAK0B,UAAYxB,SAAWF,KAAKP,MAAMS,YAEhE,yBAAKE,UAAU,eACX,kBAAC,EAAD,CAAQe,OAASnB,KAAKP,MAAM0B,OAASH,MAAQhB,KAAKP,MAAMuB,e,GAvC9CF,c,MCHnB,SAASiC,IACpB,OACI,kBAAC,IAAMD,SAAP,KACI,gCACI,+CCODE,MATf,WACE,OACE,kBAAC,IAAMF,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcG,QACW,cAA7BC,OAAO1B,SAAS2B,UAEe,UAA7BD,OAAO1B,SAAS2B,UAEhBD,OAAO1B,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.04ec74ef.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport './UserInput.css';\r\n\r\nexport default class UserInput extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            player1 : '',\r\n            player2 : '',\r\n            error : false,\r\n            err_message : ''\r\n        }\r\n        this.fight = this.fight.bind(this);\r\n    }\r\n\r\n    fight() {\r\n        if(this.state.player1 && this.state.player2) {\r\n            this.setState({ fighting : true, error : false });\r\n            this.props.onFight(this.state.player1, this.state.player2);\r\n        } else {\r\n            this.setState({ error : true, fighting : false, err_message : 'Inputs invalid!' });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sub-container\"> \r\n                <div className=\"error\" hidden={ !this.state.error }>\r\n                    <p>{ this.state.err_message }</p>\r\n                </div>\r\n                <div className=\"half\">\r\n                    <label> Player One </label>\r\n                    <input type=\"text\" placeholder=\"Enter Username\" value={ this.state.player1 } onChange={ (e) => { this.setState({ player1 : e.target.value }) } }/>\r\n                </div>\r\n                <div className=\"half\">\r\n                    <label> Player Two </label>\r\n                    <input type=\"text\" placeholder=\"Enter Username\" value={ this.state.player2 } onChange={ (e) => { this.setState({ player2 : e.target.value }) } }/>\r\n                </div>\r\n                <button onClick={ this.fight } disabled={ this.props.fighting }>\r\n                    { this.props.fighting ? 'Fighting...' : 'Fight' }\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport './Result.css';\r\n\r\nexport default class Result extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"result\" hidden={ !this.props.score }>\r\n                <h1>Winner</h1>\r\n                <h4>Score: { this.props.score.toFixed(2) }</h4>\r\n                <img src={ this.props.winner.avatar_url } alt=\"Profile Picture\"/>\r\n                <p id=\"username\">@{ this.props.winner.login }</p>\r\n                <p id=\"location\">{ this.props.winner.location }</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport UserInput from './UserInput';\r\nimport Result from './Result';\r\n\r\nimport './Home.css';\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            winner : '',\r\n            score : 0,\r\n            error : false,\r\n            err_message : 'hello',\r\n            fighting : false\r\n        }\r\n        this.fetchData = this.fetchData.bind(this);\r\n    }\r\n\r\n    async fetchData(player1, player2) {\r\n        try {\r\n            this.setState({ fighting : true });\r\n            let player1data = await ((await fetch('https://api.github.com/users/' + player1)).json());\r\n            let player2data = await ((await fetch('https://api.github.com/users/' + player2)).json());\r\n            let player1score = (player1data.followers / player1data.following) + (player1data.public_repos / ((new Date()).getFullYear() - parseInt(player1data.created_at.split('-')[0])) );\r\n            let player2score = (player2data.followers / player2data.following) + (player2data.public_repos / ((new Date()).getFullYear() - parseInt(player2data.created_at.split('-')[0])) );\r\n            if (isNaN(player2score) || isNaN(player1score)) throw new Error('Are those usernames correct?');\r\n            this.setState({ winner : player1score > player2score ? player1data : player2data, score : player1score > player2score ? player1score : player2score, error : false, fighting : false });\r\n        } catch(err) {\r\n            this.setState({ error : true, err_message : err.message ? err.message : 'Something went wrong! Try again later.', fighting : false });\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"main-error\" hidden={ !this.state.error }>\r\n                    <p>{ this.state.err_message }</p>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"half-screen\">\r\n                        <UserInput onFight={ this.fetchData } fighting={ this.state.fighting }/>\r\n                    </div>\r\n                    <div className=\"half-screen\">\r\n                        <Result winner={ this.state.winner } score={ this.state.score } />\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nimport './Header.css';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <React.Fragment>\r\n            <header>\r\n                <h1>GitHub Battle</h1>\r\n            </header>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport Home from './components/Home';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Header />\n      <Home />\n    </React.Fragment>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}